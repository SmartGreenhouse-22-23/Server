name: ci

on:
  push:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-12, macos-11, macos-10.15]
        mongodb-version: [ 6.0, 5.0, 4.4, 4.2 ]
        include:
          - os: ubuntu-22.04
            mongodb-version: 6.0
          - os: ubuntu-20.04
            mongodb-version: 6.0
          - os: ubuntu-20.04
            mongodb-version: 5.0
          - os: ubuntu-20.04
            mongodb-version: 4.4
          - os: windows-2022
            mongodb-version: 5.0
          - os: windows-2019
            mongodb-version: 5.0
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v3
      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11
      - name: Create mongo Docker container
        uses: ankane/setup-mongodb@v1
        with:
          mongodb-version: ${{ matrix.mongodb-version }}
      - name: upload collection (Windows)
        if: ${{ runner.os == 'Windows'}}
        run: |
            $params = '--db', 'greenhouse',
                      '--collection', 'greenhouse',
                      '--file', 'greenhouseService/src/main/resources/greenhouseDatabase.json',
                      '--headerline'
                      '--jsonArray'
            & 'C:\Program Files\MongoDB\Server\5.0\bin\mongoimport.exe' $params
      - name: upload collection (mac os and ubuntu)
        if: ${{ runner.os != 'Windows'}}
        run: |
              mongoimport --db='greenhouse' --collection='greenhouse' --file='greenhouseService/src/main/resources/greenhouseDatabase.json' --jsonArray
      - name: build
        run: ./gradlew build -x test
      - name: test
        run: ./gradlew test
  release:
    if: github.event_name == 'push'
    needs:
      - build
    runs-on: ubuntu-latest
    concurrency:
      group: release
      cancel-in-progress: false
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOYMENT_TOKEN }}
        run: |
          npm install
          npx semantic-release
  success:
    runs-on: ubuntu-latest
    needs:
      - build
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}